from argparse import ArgumentParser
from pathlib import Path
import sys
import binascii
import os

TEMPLATE = """\
// This file is generated by gen_payload.py
// From {filename}
const uint8_t payload[] = {{
{payload}
}};

const size_t payload_size = sizeof(payload) / sizeof(payload[0]);
"""

def printProgressBar(progress):
	i = int(progress * 20)
	sys.stdout.write('\r')
	sys.stdout.write("[%-20s] %d%%" % ('='*i, 5*i))
	sys.stdout.flush()

def openFileToByte_generator(filename, chunkSize=128):
	fileSize = os.stat(filename).st_size
	readBytes = 0.0
	with open(filename, "rb") as f:
		while True:
			chunk = f.read(chunkSize)
			# print(type(chunk))
			readBytes += chunkSize
			printProgressBar(readBytes/float(fileSize))
			if chunk:
				for byte in chunk:
					if sys.version_info[0] < 3:
						yield byte
					else:
						yield byte.to_bytes(1, byteorder='big')
			else:
				break

def main():
	argparser = ArgumentParser(description="Generate a payload for the shellcode")

	argparser.add_argument("file", type=Path, help="The file to read")
	argparser.add_argument("output", type=Path, help="Output file")

	args = argparser.parse_args()

	stringBuffer = "\t"
	countBytes = 0
	print("reading file: " + str(args.file))

	for byte in openFileToByte_generator(args.file, 16):
		countBytes += 1
		stringBuffer += "0x" + binascii.hexlify(byte).decode('ascii') + ", "
		if countBytes % 16 == 0:
			stringBuffer += "\n\t"

	stringBuffer = TEMPLATE.format(filename=args.file.name, payload=stringBuffer)

	print("\nwriting file: " + str(args.output))
	with args.output.open("w") as f:
		f.write(stringBuffer)

	print("finished")

main()
